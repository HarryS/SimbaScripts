{///////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                   Harry's Port Sarim Whatever Cutter v1.3                  //
//                                                                            //
//   Requirements:                                                            //
//     Level 1+ woodcutting, axe wielded or in first inventory slot.          //
//     Start anywhere, but Port Sarim is best (http://i.imgur.com/EtIOp.png)  //
//     It is best to be wielding your axe, but not required. Keep in slot 1.  //
//     Edit the consts below (DeclarePlayers, consts, basic setup.)           //
//     Latest Simba with latest SRL and Reflection. (http://villavu.com)      //
//                                                                            //
//   Features:                                                                //
//     Cuts: trees (levels 1-14), oaks (levels 15-29), willows (levels 30-99) //
//             OR yews (60-99). Banks them at the deposit box to the south.   //
//     Picks up birds-nests, dropped yew logs, and rune hatchets.             //
//     In the rare chance you die, will death-walk back to Port Sarim.        //
//       You will probably die more often if you are a lvl-3, so go level cb! //
//     Grabs an axe from Bob in Lumbridge if you do not have one.             //
//     Script is designed to "never stop", should run until a random breaks.  //
//     QUALITY SCRIPT                                                         //
//     Auto-updating!                                                         //
//     Anti-ban modules.                                                      //
//     World-switches every ~25 minutes.                                      //
//     Simple to setup and use!                                               //
//     And much more!                                                         //
//                                                                            //
//   Future features (not yet added):                                         //
//     Suggest something on the forums!                                       //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                              Changelog!                                    //
//    0.1 - Initial release.                                                  //
//    0.2 - You may now use axes, both wielded and unwielded.                 //
//    0.3 - Tree finding should be a lot more accurate now.                   //
//    0.4 - Proper checking if you don't have an axe anymore.                 //
//            Level 1-29 trainer! Any person with an axe will work now!       //
//    0.5 - Really dumb bug that could cause issues in very rare instances.   //
//    0.6 - Fixed for the horrible and ugly RuneScape graphics update.        //
//    0.7 - Yew support - make const DoYews=True to activate.                 //
//    0.8 - Drastically improved Yew switching speed.                         //
//    0.9 - Grab an axe from Bob if you don't have one.                       //
//            Random nextplayer, level goals, and numerous other tweaks.      //
//    1.0 - Complete rework of tree location detection (thanks Drags111!)     //
//    1.1 - Small but important fix on oak and yew tree finding.              //
//    1.2 - Yew relocation improved; a ton more humanlike. Other tiny tweaks. //
//    1.3 - Banking made more efficient for those with an axe in their inv.   //
//            Looting of Yew logs that other bots dropped/died with.          //
//            Removal of possible but improbable infinite loop.               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//   Script License: WTFPL - Do What The Fuck You Want To Public License.     //
//                                                                            //
//      This program is free software. It comes without any warranty, to the  //
//      extent permitted by applicable law. You can redistribute it and/or    //
//      modify it under the terms of the Do What The Fuck You Want To Public  //
//      License, Version 2, as published by Sam Hocevar. See                  //
//      http://sam.zoy.org/wtfpl/COPYING for more details.                    //
//                                                                            //
///////////////////////////////////////////////////////////////////////////////}

program HarrysPSWC;
{$DEFINE SMART}
{$i SRL/SRL.scar}
{$i Reflection/Reflection.simba}
{$i SRL/SRL/Skill/Magic.scar}
{$i SRL/SRL/Misc/Stats.simba}

procedure DeclarePlayers;
begin
  HowManyPlayers := 1;
  CurrentPlayer := 0;
  NumberOfPlayers(HowManyPlayers);

  with Players[0] do
  begin
    Name        := 'Username';
    Pass        := 'Password';
    Nick        := 'nickname';
    Booleans[9] := True; // True if your axe is wielded. False if it's in inventory.
    Member      := False;
    Active      := True;
  end;
  
end;

const
  SERVER  = 61;     // Enter "0" to pick a random server.
  SIGNED  = True;  // Use the signed RS-client? Leave at True unless you know what you're doing.
  MEMBERS = False; // Set to True if using a RS-Members account. False if F2P.
  WORLD_SWITCH = True; // Switch world when connecting to RS?
  WORLD_LEAVE = True; // Hop words every ~25 minutes or so. WORLD_SWITCH must be true.
  DoYews  = False; // Chop Yews? (Not suggested due to them being such slow exp)
  YewAt   = 60;  // What level to begin Yew cutting at. DoYews must be true for this to activate.
  GrabItems = True; // Grab expensive items if found on ground.
  WCGoal = 99; // Stop player at this woodcutting level.
  AxeGrab = True; // Grab a bronze axe for free from Bob @ lumbridge, if your current axe gets lost.
  RandomNP = True; // Random NextPlayer (chooses random player to run next if using multiplayer).

  Autochecken = True; // Automatically check for updates and download the newer version of the script if it gets updated.

  SRLStats_Username = ''; // Your SRL Stats Username (not RS!)
  SRLStats_Password = ''; // Your SRL Stats Password (not RS!)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//   End of Basic Setup - you may continue down more IF you know what you're  //
//          doing. If not, you will probably break something!...              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

  MOUSE_SPEED              = 15;
  MOUSE_SPEED_RANDOMNESS   = 7;
  // Mouse speed will be "MOUSE_SPEED + Random(MOUSE_SPEED_RANDOMNESS);".

  DebugMe = False; // Get advanced debugs of current procedures. Not suggested.

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//   End of Advanced Setup - really, do NOT touch anything below this....     //
//           or you will probably break something......... :)                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

  SCRIPT_NAME        = 'Port Sarim Whatever Cutter';
  SCRIPT_VERSION     = '1.3';

var PlayerSessionTime,ReportTimer,AntiBansGlobal, WillowsCutGlobal, BirdieGlobal,
     WorldLeaveMarker,WorldsHopped, DethWelks, StatsTimer, AtkFasf, notcooldood,
     PowerTmp, ProperLog, curyew : integer;

Function r_WebWalkH(T: TTile): Boolean; // JuKKa
Var
  I, Tm: Integer;
  M, P: TPoint;
  CTRLPoints: TPointArray;
Begin
  P := TileToPoint(T);
  Tm := (GetSystemTime + (5 * 60000));
  if DistanceFrom(P) < 2 then
  begin
    if DebugMe then WriteLn('Located close enough to tile, unable to webwalk!');
    Exit;
  end;
  Repeat
    M := GetMyPos;
    CtrlPoints := r_WindPath(M.x, M.y, P.X, P.Y, 5.0, 2.5, 0.0, 0.0, 4.5, 2.5);
    For I:= High(CtrlPoints) DownTo 0 Do
      if WalkToTile(Tile(CtrlPoints[i].x, CtrlPoints[i].y),0, 10) Then
      Begin
        Result := I = High(CtrlPoints);
        R_FindRandoms;
        if LeaveDangerZone then
          Wait(500+Random(2000));
        Break;
      End;
    R_FindRandoms;
  Until(Result or (GetSystemTime > Tm));
End;

function r_TileOnMSH(moix,moiy: integer) : Boolean; // Drags111
begin
  Result := PointInBox(Point(moix,moiy), IntToBox(MSX1, MSY1, MSX2, MSY2));
end;

procedure NPH(staytus: boolean);
begin
  if RandomNP then
    RandomNextPlayer(staytus)
  else
    NextPlayer(staytus);
end;

function NotSafeZone: boolean;
var wTile: TPoint; LagTries,ee,movWait: integer;
begin
  if (DistanceFrom(Tile(3045, 3246)) > 50) then // PS dock
  begin
    Writeln('Detected you away from Port Sarim - waiting a few seconds to know for sure.');
    Wait(2000+Random(5000));
    if R_FindRandoms then // Maybe you triggered a random?
      Wait(10000+Random(5000)) // Anti-lag problems.
    else
      Wait(1000+Random(3000));
    if (DistanceFrom(Tile(3045, 3246)) > 50) then
      Result := True
    else
      Result := False;
    if Result = False then
      Exit;
    if Result then
    begin
      WriteLn('You probably ran away from Port Sarim - let''s walk back to it.');
      wTile := TileToMM(Tile(3060, 3254));
      if not rs_OnMiniMap(wTile.X, wTile.Y) then
      begin
        WriteLn('Tile doesn''t exist, o noes! Might you be in lubmy?');
        Result := True;
        if (DistanceFrom(Tile(3222,3219)) < 50) and (GetPlaneIndex = 0) then
        begin
          WriteLn('You are in the Lubmy area. Let''s walk back to the bank.');
          // Deathwalk stuff.
          for ee := 1 to 3 do
            R_ClickItem(ee, True, '');
          Inc(DethWelks);
          R_WebWalkH(Tile(3238, 3219)); // Lumby east int
          r_FFlag(0);
          MarkTime(movWait);
          repeat
            if (GetSpeed > 0) then
              Wait(1+Random(50))
            else
              Break;
            if (TimeFromMark(movWait) > 10000) then
              Break;
          until False;
          R_WebWalkH(Tile(3218, 3247)); // Lumby north gen store
          r_FFlag(5+Random(5)-Random(5));
          R_WebWalkH(Tile(3078, 3249)); // draynor bank
          r_FFlag(5+Random(5)-Random(5));
          R_WebWalkH(Tile(3071, 3276)); // leave draynor
          r_FFlag(5+Random(5)-Random(5));
          R_WebWalkH(Tile(3065, 3275)); // leave draynor west
          r_FFlag(0);
          case Players[CurrentPlayer].Strings[7] of
            'normal','oak': R_WebWalkH(Tile(3037, 3270));
            'willow': R_WebWalkH(Tile(3060, 3254));
            'yew': R_WebWalkH(Tile(3048, 3270));
          end;
          r_FFlag(0);
          SetAngle(True);
          WriteLn('How does I reflection deathwalk? :D');
          if (DistanceFrom(Tile(3060, 3254)) < 35) then
            Result := False
          else
            Result := True;
          Exit;
        end;
        if TabExists(Tab_Magic) then
        begin
          WriteLn('We have the power to teleabort!');
          GameTab(Tab_Magic);
          Cast('lumbridge home teleport', False);
          Wait(15000+Random(10000));
          WriteLn('(Probably) back in lumby via teleport!');
          if (DistanceFrom(Tile(3222,3219)) < 50) and (GetPlaneIndex = 0) then
          begin
            Inc(DethWelks);
            R_WebWalkH(Tile(3238, 3219)); // Lumby east int
            r_FFlag(0);
            MarkTime(movWait);
            repeat
              if (GetSpeed > 0) then
                Wait(1+Random(50))
              else
                Break;
              if (TimeFromMark(movWait) > 10000) then
                Break;
            until False;
            R_WebWalkH(Tile(3218, 3247)); // Lumby north gen store
            r_FFlag(5+Random(5)-Random(5));
            R_WebWalkH(Tile(3078, 3249)); // draynor bank
            r_FFlag(5+Random(5)-Random(5));
            R_WebWalkH(Tile(3071, 3276)); // leave draynor
            r_FFlag(5+Random(5)-Random(5));
            R_WebWalkH(Tile(3065, 3275)); // leave draynor west
            r_FFlag(0);
            case Players[CurrentPlayer].Strings[7] of
              'normal','oak': R_WebWalkH(Tile(3037, 3270));
              'willow': R_WebWalkH(Tile(3060, 3254));
              'yew': R_WebWalkH(Tile(3048, 3270));
            end;
            r_FFlag(0);
            WriteLn('How does I reflection deathwalk?');
            SetAngle(True);
          end;
          Result := False;
          Exit;
        end;
        Exit;
      end
      else
      begin
        WriteLn('Tile found, walking to it.');
        repeat
          Inc(LagTries);
          Mouse(wTile.x, wTile.y, 1, 1, true);
          Wait(RandomRange(3000, 5000));
        until (LagTries > 3) or (DistanceFrom(Tile(3060, 3254)) < 7);
        if LagTries > 3 then
        begin
          WriteLn('Could not get back to the trees, we failed.');
          Result := True;
          Exit;
        end
        else
        begin
          WriteLn('We got back to the trees, hell yeah!');
          Result := False;
          Exit;
        end;
      end;
    end;
  end else
  begin
    if DebugMe then WriteLn('You be there!');
    Result := False;
  end;
end;

function hInvFull: Boolean; // n3s
begin
  if (not LoggedIn) or LobbyScreen then
  begin
    Result := False;
    Exit;
  end;
  Result := (r_InvCount = 28);
end;

procedure HopelesslyLost;
begin
  if NotSafeZone then
  begin
    if not LoggedIn or LobbyScreen then
    begin
      WriteLn('Not logged in, might you be at lobby screen?');
      if LobbyScreen then
      begin
        writeLn('Not logged in, but at lobby screen - there is a chance you''re not broken.');
        writeLn('Probably not broken - nextplayer true.');
        LeaveLobby;
        NPH(True);
        Exit;
      end;
      writeLn('Not logged in - there is a chance you''re not broken.');
      writeLn('Probably not broken - nextplayer true.');
      NPH(True);
      Exit;
    end else
    begin
      if (GetColor(339, 25) = 12378347) and (GetColor(201, 25) = 12378347) then
      begin
        WriteLn('You probably died; so sad... relogging in a bit.');
        NPH(True);
        Exit;
      end else
      begin
        writeLn('Reflection tiles say you''re not near the Port and logged in.');
        writeLn('In random or broken; logging out for your saftey - nextplayer false.');
        Players[CurrentPlayer].Rand := 'PlayerLost1';
        NPH(False);
        Exit;
      end;
    end;
  end;
end;

procedure RandomRClickH; // phantombmx/EvilChicken - removed inv clicking
var
  M: Byte;
  Inv: Boolean;
begin
  if (not LoggedIn) then exit;
  M := MouseSpeed;
  MouseSpeed := 7 + Random(25);
  MouseBox(MSX1, MSY1, MIX2, MIY2, 2)
  if (Random(3) > 0) then
    Inv := ChooseOption('xamine');
  if (not Inv) then ChooseOption('ancel');
  MouseSpeed := M;
end;

procedure AntiBan_Short;
begin
  case (Random(400)) of
    0: RandomRClickH;
    1: MouseSpeed := MOUSE_SPEED + Random(MOUSE_SPEED_RANDOMNESS);
    2: PickUpMouse;
    3..400: begin
      Wait(100 + Random(50));
      Exit;
    end;
  end;
  Inc(Players[CurrentPlayer].Integers[2]);
  Inc(AntiBansGlobal);
//  Inc(Stats_CustomVars[2]);
end;

function rInFight: boolean; // By Narcle
var
 T: Integer;
begin
  T := GetSystemTime + 2405;
  if (not LoggedIn) or LobbyScreen then
  begin
    Result := False;
    Exit;
  end;
  repeat
    wait(66)
    if (GetAnimation > -1) then
      Result := true;
  until Result or (GetSystemTime > T);
end;

function R_QuickPSDB: Boolean;
var
  Tiles: TPointArray;
  P: TPoint;
  Tries,bwait,impatient,bx,by: Integer;
begin
  Result := R_DepositBoxScreen;
  Tries := 0;
  if Result then Exit;

  MakeCompass('N');

  Tiles := [Point(3047,3239)];

  SortTPAFrom(Tiles, GetMyPos);
  if (DistanceFrom(Tiles[0]) > 3) or not TileOnMS(Tiles[0], 600) then
  begin
    if not(TileOnMM(Tiles[0])) then
    begin
      WriteLn('Could not find Bank Booth.');
      Exit;
    end;
    WalkToTile(Tiles[0], 0, 5);
    Wait(1+Random(42));
  end;
  if not(TileOnMS(Tiles[0], 600)) then
  begin
    MarkTime(Bwait);
    repeat
      Wait(1+Random(42));
      if TimeFromMark(Bwait) > 5000 then
      begin
        WriteLn('Tired of waiting for bank, exit!');
        Exit;
      end;
    until (TileOnMS(Tiles[0], 600));
  end;

  R_FindRandoms;

  P := TileToMS(Tiles[0], 10);
  MMouse(p.x - 7, p.y + 3, 16, 16);
  GetMousePos(bx,by);
  Wait(1+Random(12));
  if r_isUpText('eposit ') then
  begin
    Mouse(bx,by,0,0,True);
    result := r_WaitCrossHairColor(CROSSHAIR_RED, 500+Random(100)-Random(100));
    if Result then
    repeat
      Result := False;
      MarkTime(impatient);
      while not R_DepositBoxScreen do
      begin
        Wait(10+Random(42));
        if TimeFromMark(impatient) > 5001 then
        begin
          writeln('Too long waiting...');
          Exit;
        end;
      end;
      Inc(Tries);
      Result := R_DepositBoxScreen;
    until Result or (Tries > 1);
  end;
  writeln('Yay, probably opened deposit box.');
end;

procedure DepositH; // by SRL etc, riced by me
var
   I, T, x, y,tti: Integer;
   B: TBox;
begin
  tti := 0;
  repeat
    inc(tti);
    for I := 2 to 28 do
    begin
      B := DepositItemBox(I);
      if (not(FindColor(X, Y, srl_outline_black, B.X1, B.Y1, B.X2, B.Y2))) then
        Continue;
      Mouse((B.X1 + B.X2) shr 1, (B.Y1 + B.Y2) shr 1, 7, 7, False);
      WaitOptionMulti(['Deposit-All', 'Deposit'], 200);
      T := GetSystemTime;
      Wait(RandomRange(10, 600));
    end;
    if not FindColor(X, Y, srl_outline_black, 153, 121, 429, 252) then
    begin
      Wait(10+Random(50));
      if not FindColor(X, Y, srl_outline_black, 153, 121, 429, 252) then
        Exit
      else
        WriteLn('Inv not empty yet.');
    end;
    Wait(200+Random(2000));
  until(tti > 6);
end;

procedure GrabANewAxe;
var b0b: TNPCArray; P: TPoint;
begin
  if not AxeGrab then
  begin
    WriteLn('Bob Axe support disabled (AxeGrab=False). Bye bye!');
    Players[CurrentPlayer].Loc := 'NeedNewAxe1';
    NPH(False);
    Exit;
  end;
  WriteLn('Grabbing a new axe at Bob.');
  if TabExists(Tab_Magic) then
  begin
    WriteLn('We have the power to teleabort!');
    GameTab(Tab_Magic);
    Cast('lumbridge home teleport', False);
    Wait(15000+Random(10000));
    WriteLn('(Probably) back in lumby via teleport!');
    if (DistanceFrom(Tile(3222,3219)) < 50) and (GetPlaneIndex = 0) then
    begin
      if R_ItemSlotExists(1) then
      begin
        if R_ItemSlotExists(28) then
          DropItem(28);
        DragItem(1,28);
      end;
      R_WebWalkH(Tile(3230,3203));
      R_FFlag(0);
      Wait(3000+Random(5000));
      b0b := SortNPCs(GetNPCs('Bob'));
      if GetArrayLength(b0b) = 0 then
      begin
        WriteLn('No Bob found, gotta die!');
        Players[CurrentPlayer].Loc := 'BobFail3';
        NPH(False);
        Exit;
      end;
      if not TileOnMS(b0b[0].Tile, 600) then
      begin
        WriteLn('No Bob found, gotta die!');
        Players[CurrentPlayer].Loc := 'BobFail5';
        NPH(False);
        Exit;
      end;
      begin
        try
          P := TileToMS(b0b[0].Tile, 600);
        except
          WriteLn('Failed to find Bob.');
          Players[CurrentPlayer].Loc := 'BobFail7';
          NPH(False);
          Exit;
        end;
        if (toStr(P.X) = '-1') or (toStr(P.Y) = '-1') then
        begin
          WriteLn('Failed to find Bob -1,-1.');
          Players[CurrentPlayer].Loc := 'BobFail9';
          NPH(False);
          Exit;
        end;
        Mouse(P.X,P.Y,3,3,False);
        Wait(20+Random(300));
        if R_ChooseOption('rade Bob') then
        begin
          R_FFlag(0);
          Wait(3000+Random(5000));
          Mouse(103,67,10,10,False);
          Wait(20+Random(300));
          if R_ChooseOption('ake 1 ') then
          begin
            WriteLn('Got axe properly!');
            Wait(2000+Random(5000));
            Mouse(655,31,10,10,True);
            R_FFlag(0);
            Wait(Random(2000));
            R_ClickItem(1, True, '');
            Wait(Random(2000));
            WriteLn('Logging out to clear chat box.');
            NPH(True);
            Exit;
          end
          else
          begin
            WriteLn('Failed to take axe.');
            Players[CurrentPlayer].Loc := 'BobFail22';
            NPH(False);
            Exit;
          end;
        end
        else
        begin
          WriteLn('Failed to click Bob.');
          Players[CurrentPlayer].Loc := 'BobFail24';
          NPH(False);
          Exit;
        end;
      end;
    end else
    begin
      WriteLn('Lumby tele failed, gotta kill your guy.');
      Players[CurrentPlayer].Loc := 'BobFail1';
      NPH(False);
      Exit;
    end;
  end else
  begin
    WriteLn('No magic tab to tele, gotta kill your guy.');
    Players[CurrentPlayer].Loc := 'BobFail2';
  end;
end;

function BankinDat(whereto: string): boolean;
var FailTimes,PinFails: integer;
begin
  if whereto = 'leave' then
  begin
    Wait(100+Random(422)+Random(422));
    WriteLn('Emptied inv, get to the trees!');
    case Players[CurrentPlayer].Strings[7] of
      'normal','oak': R_WebWalkH(Tile(3037, 3270));
      'willow': R_WebWalkH(Tile(3060, 3254));
      'yew':
        case curyew of
          0: R_WebWalkH(Tile(3048-Random(2)+Random(2),3270-Random(2)+Random(2)));
          1: R_WebWalkH(Tile(3042-Random(2)+Random(2), 3270-Random(2)+Random(2)));
          2: R_WebWalkH(Tile(3054-Random(2)+Random(2), 3270-Random(2)+Random(2)));
        end;
    end;
    //r_FFlag(8);
    Exit;
  end else
  begin
    r_WebWalkH(Tile(3047,3236)); // PSDB tile
    Wait(10+Random(500));
    if (Pos('hatchet',GetItemNameAt(1)) = 0) then
    begin
      if not Players[CurrentPlayer].Booleans[9] then // axe in inv
      begin
        WriteLn('No axe in inv?.. Waiting.');
        wait(1000+Random(1000));
        if (Pos('hatchet',GetItemNameAt(1)) = 0) then
        begin
          WriteLn('No axe 2x. Gotta kill player.');
          WriteLn('Please equip an axe next time, it is more "stable".');
          Players[CurrentPlayer].Loc := 'AxeFail1';
          NPH(False);
          Exit;
        end;
        WriteLn('Alles klar.');
      end
      else
      if DebugMe then WriteLn('Axe still there!');
    end else
    if Players[CurrentPlayer].Booleans[9] then // wielded axe, but one in inv?
    begin
      Players[CurrentPlayer].Booleans[9] := False;
      WriteLn('You have an axe in your inv... please set DeclatePlayer Booleans[9] to False next time.');
    end;
    R_FFlag(0);
    wait(100+Random(500));
    FailTimes := 0;
    PinFails := 0;
    repeat
      R_QuickPSDB;
      Inc(FailTimes);
      if DistanceFrom(Tile(3047,3236)) > 20 then
      begin
        WriteLn('Far away, might be random event?');
        Wait(10+Random(100));
        if R_FindRandoms then
          Wait(5000+Random(5000))
        else
          Wait(10+Random(100));
      end;
    until R_DepositBoxScreen or (FailTimes > 29) or (not LoggedIn);
    if not LoggedIn then
      Exit;
    if (FailTimes > 29) then
    begin
      WriteLn('Banking failed to find bank. Gonna kill your player for your saftey.');
      Players[CurrentPlayer].Rand := 'FailBankFind1';
      CloseBank;
      Logout;
      NPH(False);
      Exit;
    end;

    if Players[CurrentPlayer].Booleans[9] then // is wielded
      Mouse(340, 275, 15, 10, True) // Deposit button, straight from SRL.
    else
      DepositH; // axe in slot 1.
    IncEx(WillowsCutGlobal,28);
    IncEx(Players[CurrentPlayer].Integers[69],28);
    case Players[CurrentPlayer].Strings[7] of
      'normal':
      begin
        stats_IncVariable('Normal Logs Chopped',28);
        IncEx(Players[CurrentPlayer].Integers[68], 700);
        stats_IncVariable('Total EXP Gained', 700); // 37.5 exp per normal
      end;
      'oak':
      begin
        stats_IncVariable('Oak Logs Chopped',28);
        IncEx(Players[CurrentPlayer].Integers[68],1050);
        stats_IncVariable('Total EXP Gained', 1050); // 37.5 exp per oak
      end;
      'willow':
      begin
        stats_IncVariable('Willow Logs Chopped',28);
        IncEx(Players[CurrentPlayer].Integers[68],1890);
        stats_IncVariable('Total EXP Gained', 1890); // 67.5 exp per willow
      end;
      'yew':
      begin
        stats_IncVariable('Yew Logs Chopped',28);
        IncEx(Players[CurrentPlayer].Integers[68],4900);
        stats_IncVariable('Total EXP Gained', 4900); // 175 exp per yew
      end;
    end;
    Wait(10+Random(542));
    Result := True;
    BankinDat('leave');
    Exit;
  end;
end;

procedure KeepHealthy;
var maximumtrolling: integer; current: string;
begin
  current := 'durr';
  maximumtrolling := GetMMLevels('run',current);
  case current of
    'Orange','Yellow','Green': SetRun(True);
  end;
end;

function Moving: boolean;
var Speed: integer;
begin
  Speed := GetSpeed;
  if Speed < 1 then
    Result := False
  else
    Result := True;
end;

function BodenItems: boolean;
var
  Items: TGroundItemArray;
  TempMS: TPoint;
  iPad: Integer;
begin
  Result := False;
  if not GrabItems then
    Exit;
  if not LoggedIn then
    Exit;

  Items := GetItemsNear(3);
  if GetArrayLength(Items) > 0 then
  begin
    for iPad := 0 to high(items) do // Make this more efficient later.
      case items[iPad].ID of
      5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 7413, 11966:
      begin
        TempMS := TileToMSEx(Items[iPad].Tile, 0.5, 0.5, 100);
        Mouse(TempMS.X, TempMS.Y, 5, 5, false);
        if R_WaitOption('Bird', 500) then
        begin
          WriteLn('Got birds nest!');
          stats_IncVariable('Bird Nest',1);
          Inc(BirdieGlobal);
          Result := True;
          R_FFlag(0);
          Wait(500+Random(2000));
        end
        else
          WriteLn('Failed to grab nest. sadfrog.');
      end;
      1515:
      begin
        TempMS := TileToMSEx(Items[iPad].Tile, 0.5, 0.5, 100);
        Mouse(TempMS.X, TempMS.Y, 5, 5, false);
        if R_WaitOption('Take Yew', 500) then
        begin
          WriteLn('Got yew logs off ground!');
          stats_IncVariable('Bird Nest',1);
          Inc(BirdieGlobal);
          Result := True;
          R_FFlag(0);
          Wait(100+Random(1000));
        end
        else
          WriteLn('Failed to grab yew logs off ground. sadfrog.');
      end;
      1359:
      begin
        TempMS := TileToMSEx(Items[iPad].Tile, 0.5, 0.5, 100);
        Mouse(TempMS.X, TempMS.Y, 5, 5, false);
        if R_WaitOption('Take Rune', 500) then
        begin
          WriteLn('Got Rune hatchet off ground!');
          stats_IncVariable('Bird Nest',1);
          Inc(BirdieGlobal);
          Result := True;
          R_FFlag(0);
          Wait(100+Random(1000));
        end
        else
          WriteLn('Failed to grab Rune hatchet off ground. sadfrog.');
      end;
    end;
  end;
  SetArrayLength(Items,0);
end;

procedure CheckPowerLevels;
begin
  if not LoggedIn or LobbyScreen then
    Exit;
  Players[CurrentPlayer].Integers[42] := R_GetSkillLevel(Skill_Woodcutting);
  Inc(PowerTmp);
  case Players[CurrentPlayer].Integers[42] of
    1..15: Players[CurrentPlayer].Strings[7] := 'normal';
    15..29: Players[CurrentPlayer].Strings[7] := 'oak';
    30..99:
    begin
      Players[CurrentPlayer].Strings[7] := 'willow';
      if YewAt <= Players[CurrentPlayer].Integers[42] then
        if DoYews then
          Players[CurrentPlayer].Strings[7] := 'yew';
    end
    else
    begin
      WriteLn('Failed to get current skill level...');
      if PowerTmp > 5 then
      begin
        WriteLn('Failed 6x skil grabbing. Something is wrong.');
        Players[CurrentPlayer].Loc := 'FailSkillGrab1';
        NPH(False);
        Exit;
      end
      else
      begin
        Wait(1000+Random(3000));
        CheckPowerLevels;
        Exit;
      end;
    end;
  end;
  PowerTmp := 0;
end;

procedure YewRelocate;
var J: TPoint; tx,ty: integer;
begin
  if Players[CurrentPlayer].Strings[7] <> 'yew' then
    Exit;

  if Moving or R_FlagExists then
    Exit;

  if curyew = 0 then // nice place to see both trees at once.
  begin
    if (DistanceFrom(Tile(3048,3270)) < 3) then
    begin
      if Random(3) = 0 then
        Antiban_Short;
      Exit;
    end;
    if (DistanceFrom(Tile(3048,3270)) > 50) then
      Exit;
    J := TileToMS(Tile(3048,3270), 300);
    if r_TileOnMSH(J.X,J.Y) then
    begin
      MMouse(J.X-Random(20)+Random(20),J.Y-Random(20)+Random(20),0,0);
      Wait(10+Random(200));
      if r_IsUpText('alk here') then
      begin
        GetMousePos(tx,ty);
        Mouse(tx,ty,0,0,True);
        Wait(10+Random(300));
      end else
      begin
        GetMousePos(tx,ty);
        Mouse(tx,ty,0,0,False);
        Wait(10+Random(200));
        r_ChooseOption('alk here');
      end;
    end else
      R_WebWalkH(Tile(3048-Random(2)+Random(2),3270-Random(2)+Random(2)));
  end;

  if curyew = 1 then // left tree
  begin
    if (DistanceFrom(Tile(3042, 3270)) < 4) then
    begin
      if Random(3) = 0 then
        Antiban_Short;
      Exit;
    end;
    if (DistanceFrom(Tile(3042, 3270)) > 50) then
      Exit;
    J := TileToMS(Tile(3042, 3270), 300);
    if r_TileOnMSH(J.X,J.Y) then
    begin
      MMouse(J.X-Random(50)+Random(90),J.Y-Random(50)+Random(90),0,0);
      Wait(10+Random(100));
      if r_IsUpText('alk here') or r_IsUpText('own Yew') then
      begin
        GetMousePos(tx,ty);
        Mouse(tx,ty,0,0,True);
        Wait(10+Random(300));
      end else
      begin
        GetMousePos(tx,ty);
        Mouse(tx,ty,0,0,False);
        Wait(10+Random(200));
        r_ChooseOption('alk here');
      end;
    end else
      R_WebWalkH(Tile(3042-Random(2)+Random(2), 3270-Random(2)+Random(2)));
  end;

  if curyew = 2 then // right tree
  begin
    if (DistanceFrom(Tile(3054, 3270)) < 4) then
    begin
      if Random(3) = 0 then
        Antiban_Short;
      Exit;
    end;
    if (DistanceFrom(Tile(3054, 3270)) > 50) then
      Exit;
    J := TileToMS(Tile(3054, 3270), 300);
    if r_TileOnMSH(J.X,J.Y) then
    begin
      MMouse(J.X-Random(50)+Random(90),J.Y-Random(50)+Random(90),0,0);
      Wait(10+Random(100));
      if r_IsUpText('alk here') or r_IsUpText('own Yew') then
      begin
        GetMousePos(tx,ty);
        Mouse(tx,ty,0,0,True);
        Wait(10+Random(300));
      end else
      begin
        GetMousePos(tx,ty);
        Mouse(tx,ty,0,0,False);
        Wait(10+Random(200));
        r_ChooseOption('alk here');
      end;
    end else
      R_WebWalkH(Tile(3054-Random(2)+Random(2), 3270-Random(2)+Random(2)));
  end;

end;

function FindVictim: Boolean;
var
  Weidenbaum,curstump: TRSObject;
  P, curtile: TPoint;
  srch,KillFailsafe,lx,ly,PreWalk,SoRandum,tti: integer;
  Baeume: TPointArray;
begin
  Result := False;
  if not LoggedIn or LobbyScreen then
    Exit;

  if (R_GetSkillLevel(Skill_Woodcutting) >= WCGoal) then
  begin
    WriteLn('WCGoal has been hit - congrats!');
    Players[CurrentPlayer].Loc := 'WCGoal';
    NPH(False);
  end;

  if hInvFull then
    BankinDat('okaydude');

  Wait(10+Random(100));
  R_FindRandoms;
  AntiBan_Short;
  if ClickToContinue then
    CheckPowerLevels;
  KeepHealthy;
  if Random(2) = 0 then
    if IsChatBoxTextAnyLine('hatchet which',0) then
    begin
      WriteLn('Chat claims you don''t have an axe anymore, or your level is too low.');
      GrabANewAxe;
      Exit;
    end;

  if WORLD_LEAVE then // Ugly, but was annoying with "True and is not needed" errors.
    if (TimeFromMark(PlayerSessionTime) > WorldLeaveMarker) then
    begin
      WriteLn('Time''s up! Switching world.');
      Inc(WorldsHopped);
      if HowManyPlayers = 1 then
        ChangeWorld(RandomWorld(Players[CurrentPlayer].Member, False))
      else
        NPH(True);
    end;

  PreWalk := 0;

  if (DistanceFrom(Tile(3222,3219)) < 50) and (GetPlaneIndex = 0) then // Lumby
  begin
    WriteLn('In Lumbridge!');
    Exit;
  end;

  for srch := 0 to 3 do // if reflection misclicks tree so it won't wait 2 seconds
  begin
    case Players[CurrentPlayer].Strings[7] of
      'normal':
        Baeume := [Tile(3010, 3274), Tile(3011, 3266), Tile(3014, 3273),
          Tile(3018, 3271), Tile(3019, 3267), Tile(3023, 3279),
          Tile(3027, 3271), Tile(3029, 3275), Tile(3030, 3281),
          Tile(3031, 3266), Tile(3034, 3263), Tile(3036, 3266),
          Tile(3038, 3274), Tile(3046, 3263), Tile(3046, 3268),
          Tile(3046, 3272), Tile(3051, 3262), Tile(3051, 3266),
          Tile(3058, 3267), Tile(3058, 3279), Tile(3067, 3279)];
      'oak':
        Baeume := [Tile(3018, 3279), Tile(3018, 3280), Tile(3018, 3281),
          Tile(3019, 3279), Tile(3019, 3280), Tile(3019, 3281),
          Tile(3020, 3279), Tile(3020, 3280), Tile(3020, 3281),
          Tile(3021, 3271), Tile(3021, 3272), Tile(3021, 3273),
          Tile(3022, 3271), Tile(3022, 3272), Tile(3022, 3273),
          Tile(3023, 3271), Tile(3023, 3272), Tile(3023, 3273),
          Tile(3033, 3270), Tile(3033, 3271), Tile(3033, 3272),
          Tile(3034, 3270), Tile(3034, 3271), Tile(3034, 3272),
          Tile(3035, 3270), Tile(3035, 3271), Tile(3035, 3272),
          Tile(3036, 3258), Tile(3036, 3259), Tile(3036, 3260),
          Tile(3037, 3258), Tile(3037, 3259), Tile(3037, 3260),
          Tile(3038, 3258), Tile(3038, 3259), Tile(3038, 3260),
          Tile(3038, 3278), Tile(3038, 3279), Tile(3038, 3280),
          Tile(3039, 3278), Tile(3039, 3279), Tile(3039, 3280),
          Tile(3040, 3263), Tile(3040, 3264), Tile(3040, 3265),
          Tile(3040, 3278), Tile(3040, 3279), Tile(3040, 3280),
          Tile(3041, 3263), Tile(3041, 3264), Tile(3041, 3265),
          Tile(3042, 3263), Tile(3042, 3264), Tile(3042, 3265),
          Tile(3056, 3261), Tile(3056, 3262), Tile(3056, 3263),
          Tile(3057, 3261), Tile(3057, 3262), Tile(3057, 3263),
          Tile(3058, 3261), Tile(3058, 3262), Tile(3058, 3263),
          Tile(3058, 3271), Tile(3058, 3272), Tile(3058, 3273),
          Tile(3059, 3271), Tile(3059, 3272), Tile(3059, 3273),
          Tile(3060, 3271), Tile(3060, 3272), Tile(3060, 3273)];
      'willow':
        Baeume := [Tile(3058, 3251), Tile(3062, 3253), Tile(3062, 3263), Tile(3065, 3258)];
      'yew':
        Baeume := [Tile(3041, 3270), Tile(3041, 3271), Tile(3041, 3272),
          Tile(3042, 3270), Tile(3042, 3271), Tile(3042, 3272),
          Tile(3043, 3270), Tile(3043, 3271), Tile(3043, 3272),
          Tile(3053, 3269), Tile(3053, 3270), Tile(3053, 3271),
          Tile(3054, 3270), Tile(3054, 3271), Tile(3055, 3269),
          Tile(3055, 3270), Tile(3055, 3271)];
    end;

    SortTPAFrom(Baeume, GetMyPos);
    for tti := 0 to High(Baeume) do
    begin
      Weidenbaum := GetInteractableAt(Baeume[tti]);
      case Weidenbaum.ID of
        38782,38783,38785,38786,38787: Result := True; // Normals
        38731,38732: Result := True; // Oaks
        38616,38627: Result := True; // Willows
        38755: Result := True; // Yews
      else
        Result := False;
      end;
      if Result then
        Break;
      if (tti = High(Baeume)) and not Result then
      begin
        YewRelocate;
        Exit;
      end;
    end;
    Result := False;
    P := TileToMSEx(Weidenbaum.RealTile,0.5,0.5,300);
    if not r_TileOnMSH(P.X,P.Y) then
    begin
      if DebugMe then WriteLn('Tree probably offscreen.');
      Wait(1+Random(50));
      if (DistanceFrom(Weidenbaum.Tile) < 50) then
      begin
        r_WebWalkH(Weidenbaum.Tile);
        R_FFlag(1);
        Exit;
      end;
      case Players[CurrentPlayer].Strings[7] of
        'normal','oak':
        begin
          R_WebWalkH(Tile(3037, 3270));
          FFlag(1);
          Exit;
        end;
        'willow':
        begin
          writeln('walking blind');
          R_WebWalkH(Tile(3060, 3254));
          FFlag(1);
          Exit;
        end;
        'yew':
        begin
          YewRelocate;
          Exit;
        end;
      end;
      if TimeFromMark(ProperLog) > 900000 then // 15 minutes without a proper tree
      begin
        WriteLn('15 minutes not finding a log - something is BAD!');
        Players[CurrentPlayer].Loc := '15MinutesNoTree';
        CloseBank;
        Logout;
        NPH(False);
        Exit;
      end;
      Exit;
    end;

    case Players[CurrentPlayer].Strings[7] of
      'normal':
      if not R_IsUpText('own Tree') then
        MMouse(P.X-2, P.Y, 10, 17);
      'oak':
      if not R_IsUpText('own Oak') then
        MMouse(P.X-2, P.Y, 10, 17);
      'willow':
      if not R_IsUpText('own Willow') then
        MMouse(P.X-4, P.Y, 10, 17);
      'yew':
      if not R_IsUpText('own Yew') then
        MMouse(P.X-2, P.Y-1, 10, 17);
    end;
    Wait(1+Random(5));
    GetMousePos(lx,ly);
    case Players[CurrentPlayer].Strings[7] of
      'normal':
      if R_IsUpText('own Tree') then
      begin
        Mouse(lx,ly,0,0,True);
        curtile := Weidenbaum.Tile;
        Result := r_WaitCrossHairColor(CROSSHAIR_RED, 500+Random(100)-Random(100));
        if Result then
          AtkFasf := 0;
      end;
      'oak':
      if R_IsUpText('own Oak') then
      begin
        Mouse(lx,ly,0,0,True);
        curtile := Weidenbaum.Tile;
        Result := r_WaitCrossHairColor(CROSSHAIR_RED, 500+Random(100)-Random(100));
        if Result then
          AtkFasf := 0;
      end;
      'willow':
      if R_IsUpText('own Willow') then
      begin
        Mouse(lx,ly,0,0,True);
        curtile := Weidenbaum.Tile;
        Result := r_WaitCrossHairColor(CROSSHAIR_RED, 500+Random(100)-Random(100));
        if Result then
          AtkFasf := 0;
      end;
      'yew':
      if R_IsUpText('own Yew') then
      begin
        Mouse(lx,ly,0,0,True);
        curtile := Weidenbaum.Tile;
        if (DistanceTile(Tile(3042, 3270),Weidenbaum.Tile) < 6) then // right tree
          curyew := 1
        else
          if (DistanceTile(Tile(3054, 3270),Weidenbaum.Tile) < 6) then // left tree
            curyew := 2
          else
            curyew := 0; // dunno which tree!
        Result := r_WaitCrossHairColor(CROSSHAIR_RED, 500+Random(100)-Random(100));
        if Result then
          AtkFasf := 0;
      end;
    end;

    Inc(AtkFasf);
    //writeln(tostr(atkfasf));
    if AtkFasf > 30 then
    begin
      WriteLn('Failed to find tree 30 times... Something might be bad.');
      AtkFasf := 0;
      Inc(notcooldood);
      MakeCompass('N');
      SetAngle(True);
      if notcooldood > 3 then
        if TabExists(Tab_Magic) then
        begin
          WriteLn('We have the power to teleabort!');
          GameTab(Tab_Magic);
          Cast('lumbridge home teleport', False);
          Wait(15000+Random(10000));
          if (DistanceFrom(Tile(3222,3219)) < 50) and (GetPlaneIndex = 0) then
          begin
            WriteLn('Back at home Lumby.');
            notcooldood := 0;
            Exit;
          end;
          WriteLn('Something is very FUBAR with your player. He will be executed now.');
          Players[CurrentPlayer].Rand := 'FUBAR90x';
          Logout;
          NPH(False);
          Exit;
        end;
      if (DistanceFrom(Weidenbaum.Tile) < 30) then
        if not Moving then
        begin
          r_WebWalkH(Weidenbaum.Tile);
          FFlag(3);
          Exit;
        end;
    end;

    if Result then
    begin
      AtkFasf := 0;
      notcooldood := 0;
      MarkTime(ProperLog);
      MarkTime(KillFailsafe);
      SoRandum := 300000 + Random(280000) - Random(280000);
      repeat
        if DebugMe then writeLn('we choppin');
        Wait(10+Random(100));
        R_FindRandoms;
        AntiBan_Short;
        if BodenItems then
        begin
          FindVictim;
          Exit;
        end;
        curstump := GetObjectAt(curtile,OBJECT_TYPE_INTERACTABLE);
        case curstump.ID of
          38759, // Yew
          38725, // Willow
          38754,38741, // Oak
          40351,40352,40354,40355,40356: // Normal
          begin
            if DebugMe then WriteLn('Stumped!');
            Break;
          end;
        end;
        if not hInvFull then
          if ClickToContinue then
            CheckPowerLevels;
        if R_FlagExists then
          R_FFlag(0);
      until (not rInFight) or (TimeFromMark(KillFailsafe) > SoRandum) or (hInvFull); // 2 minutes
      if (not loggedIn) or LobbyScreen then Exit;
      if (TimeFromMark(KillFailsafe) > SoRandum) then
      begin
        writeLn('Took too long to cut tree, breaking out! ('+ToStr(SoRandum)+' ms)');
        wait(1000+Random(13000));
      end
      else
      begin
        if DebugMe then WriteLn('TREE HAS BEEN CHOPPED');
        if curyew = 1 then curyew := 2 else curyew := 1;
        Wait(1);
      end;
      if hInvFull then
      begin
        if curstump.ID <> 38759 then
          if curyew = 1 then
            curyew := 2
          else
            if curyew <> 0 then
              curyew := 1; // if you're not alone at the tree, chances are it was chopped when you were banking
        BankinDat('YOOOOOOO');
      end;
      Exit;
    end;
  end;
end;

procedure PrintReports;
var
  QC: array [0..1] of TStringArray; // Query = 0, Counter = 1.
  I, II: Byte;
begin
  //ClearDebug;
  WriteLn('[REPORT]');
  SRLRandomsReport;
  WriteLn('');

  for II := 0 to 1 do
    SetArrayLength(QC[II], 4);

  QC[0] := ['Total runtime:',
    'Players active:',
    'Total logs cut:',
    '-> Logs cut per hour:'];
  QC[1] := [TimeRunning,
    ToStr(PlayersActive) + ' out of ' + ToStr(HowManyPlayers),
    ToStr(WillowsCutGlobal),
    ToStr((3600 * (WillowsCutGlobal)) div (GetTimeRunning div 1000 + 1))];

  WriteLn('<!---');
  WriteLn('<! ' + Padr('Harry''s ' + SCRIPT_NAME, 35) + 'v' + SCRIPT_VERSION);
  WriteLn('<!---');

  II := High(QC[0]);
  for I := 0 to II do
    WriteLn('<! ' + Padr(QC[0][I], 32) + QC[1][I]);

  WriteLn('<!---');
  WriteLn('<! ## | Nick | A | Lvl | LogsCut/Hr: | ExpGain/Hr: | Rand:')

  for I := 0 to HowManyPlayers - 1 do
    WriteLn('<! ' + Padr(ToStr(I),                                 3) +
      '| ' + Padr(Copy(Players[I].Nick, 1, 4),                     5) +
      '| ' + Padr(ToStr(Players[I].Active)[1],                     2) +
      '| ' + Padr(ToStr(Players[I].Integers[42]), 4) +
      '| ' + Padr(ToStr(Players[I].Integers[69])+'/'+ToStr((3600 * (Players[I].Integers[69])) div (GetTimeRunning div 1000 + 1)),12) +
      '| ' + Padr(toStr(Players[I].Integers[68])+'/'+ToStr((3600 * (Players[I].Integers[68])) div (GetTimeRunning div 1000 + 1)),12) +
      '| ' + Players[I].Rand);

  WriteLn('<! Total anti-ban procedures run: '+ inttostr(AntiBansGlobal));
  if WORLD_LEAVE then
    WriteLn('<! World-hop in: '+ tostr(((Worldleavemarker + PlayerSessionTime) - (GetSystemTime)) div 60000) +' minutes.');
  if DethWelks > 0 then
    WriteLn('<! Death-walked '+toStr(DethWelks)+' times.');
  if LoggedIn and not LobbyScreen then
    WriteLn('<! There are '+ToStr(Length(GetAllPlayers))+' fellow botters woodcutting with you!');
  if BirdieGlobal > 0 then
    WriteLn('<! Items picked up: '+toStr(BirdieGlobal)+'.');


  if (TimeFromMark(StatsTimer) > 360000) then // 6 minutes.
  begin
    Stats_Commit;
    MarkTime(StatsTimer);
    WriteLn('<! Sent stats in!');
  end;

  if (SRLStats_Username = '') then
    WriteLn('<! Please consider getting your own stats username @ http://stats.villavu.com');

  WriteLn('<!---');
  WriteLn('[/REPORT]');
end;

procedure Player_OnLogIn;
begin
  Wait(1000+Random(2000));
  if (R_FindRandoms) then
    if (not Players[CurrentPlayer].Active) then
    begin
      WriteLn('Player is in a random.');
      LogOut;
      Players[CurrentPlayer].Active := False;
      Players[CurrentPlayer].Status := 'InRandom';
      Exit;
    end;

  CheckPowerLevels;
  MarkTime(PlayerSessionTime);
  WorldLeaveMarker := (2100000 + Random(1500000) - Random(1500000)); // 2100000 ms = 35 minutes. 1500000 ms = 25 minutes. Add and subtract the 25 minutes from 35 giving a huge change of randomness for world-switching.
  //Writeln(tostr(worldleavemarker));
  SetAngle(True);
  SetRun(True);
  if (GetColor(433, 499) = 65280) then // assist off
  begin
    MouseBox(412, 485, 452, 497, 2);
    Wait(10+Random(100));
    R_ChooseOption('Off');
  end;
  curyew := 0;
end;

procedure Autoupdateme;
var ClientUp, Neifile:integer;
    OnlineVersion, NewScript, NeiFeilNennen:string;
begin
  if Autochecken then
  begin
    writeln('Checking for script updates...');
    ClientUp := InitializeHTTPClient(False, False);
    SetHTTPUserAgent(ClientUp,'Simba ' + SCRIPT_VERSION);
    OnlineVersion := GetHTTPPage(ClientUp,'http://harry.lu/srl/pswc-version.txt');
    writeln(onlineversion);
    writeln(script_version)
    FreeHTTPClient(ClientUp);
    if (Length(trim(OnlineVersion)) = 3) and (trim(OnlineVersion) > SCRIPT_VERSION) then
    begin
      writeLn('Newer script version online!');
      writeLn('Autoupdating to newer version.');
      ClientUp := InitializeHTTPClient(False,False);
      SetHTTPUserAgent(ClientUp,'Simba');
      NewScript := GetHTTPPage(ClientUp,'http://harry.lu/srl/pswc-current.txt');
      FreeHTTPClient(ClientUp);

      NeiFeilNennen := AppPath + SCRIPT_NAME + ' v'+trim(OnlineVersion)+' [Pub] by Harry.simba';
      Neifile := Rewritefile(NeiFeilNennen, true);
      try
        WriteFileString(Neifile, NewScript);
      except
        begin
          writeLn('Fatal error writing to '+NeiFeilNennen+'!!');
          terminatescript;
        end;
      end;
      CloseFile(Neifile);
      writeLn('New script downloaded and saved at '+NeiFeilNennen+' !! Please use this!');
      TerminateScript;
    end else
    begin
      if (Length(trim(OnlineVersion)) <> 3) then
        WriteLn('Version checking failed (debug: length was not equal), you might be outdated.')
        else writeLn('You have the latest version of the script!');
      exit;
    end;
  end else
    WriteLn('!!!!! Not checking for latest version, you may be outdated!');
end;

procedure SetUpScript;
var
  i: Integer;
begin
  ClearDebug;

  Smart_Server := SERVER;
  Smart_Signed := SIGNED;
  Smart_Members:= MEMBERS;

  Autoupdateme;

  SetUpSRL;
  Reincarnate := True;
  DeclarePlayers;
  SetUpReflectionEx(True);
  LampSkill := 'woodcutting';

  if (SRLStats_Username = '') then
    SetupSRLStats(68, 'Anonymous', 'anon1337')
  else
    SetupSRLStats(68, SRLStats_Username, SRLStats_Password);

  MouseSpeed := MOUSE_SPEED + Random(MOUSE_SPEED_RANDOMNESS);
  SRL_Procs[srl_AntiBan] := @AntiBan_Short;
  SRL_Procs[srl_OnLogIn] := @Player_OnLogIn;

  for i := 0 to High(Players) do
  begin
    if (WORLD_SWITCH) then
      Players[i].WorldInfo := [Players[i].Member, -1, False];
    Players[i].Integers[4] := 1;
  end;

  CurrentPlayer := RandomPlayerIndex;
  ActivateClient;
  MarkTime(ProperLog);
  Wait(1000 + Random(2000));
end;

procedure MainLoop;
begin
  CurrentPlayer := RandomPlayerIndex;
  LogInPlayer;

  repeat
    repeat
      if (TimeFromMark(ReportTimer) > 180000) then // 3 minutes
      begin
        PrintReports;
        MarkTime(ReportTimer);
      end;
      HopelesslyLost;
      FindVictim;
      if (not LoggedIn) then
      begin
        WriteLn('Not logged in?');
        Wait(500+Random(1000));
        if (not LoggedIn) then Break else Wait(1);
      end;
      if LobbyScreen then
      begin
        WriteLn('At lobby screen?');
        Wait(500+Random(1000));
        if (LobbyScreen) then Break else Wait(1);
      end;
    until(False);
    if LobbyScreen then
      LeaveLobby;

    WriteLn('Detected as logged out, NPlayer');
    NPH(Players[CurrentPlayer].Active);
  until False;
end;

begin
  SetUpScript;
  MainLoop;
end.